apiVersion: charts.helm.k8s.io/v1
kind: Rating
metadata:
  name: rating
spec:
  # RATING-OPERATOR CONFIGURATION
  # This file holds the default, immutable configuration for the application.
  # This WILL override any options defined in helm-charts/rating/values.yaml, but values that doesn't exist here will be taken from it.

  ## The security part of the configuration is related to your cluster authentication method (cert files, token, non local users management)
  security:
    version: v2.0
    distribution: Kubernetes
    # The "auth" flag enables TLS/HTTPS verification in the component
    # Enable it if your cluster uses HTTPS
    auth: "false"

    # The "adminToken" string configure the application security key
    # It is used for administrator requests to the rating-operator-api and as a secret key for session encoding
    token:
      admin: thisisadmintoken

    # The "adminAccount" variable defines the which tenant is considered admin.
    # Usually, the default "admin" is enough. Some external applications already using the "admin" name could motivate to change this parameter.
    # Don't forget to edit the Grafana deployment accordingly, to syncronise both adminAccount values.
    adminAccount: admin

    # To authentication users in Rating operator three options are possible
    # Choose one authentication option from the three options (local/ldap/keycloak)

    authentication_type: local

    #  If you set authentication_type to ldap, set the following configuration information of keycloak
    ldap:
      ## Below the configuration for the ldap server
      # serverUrl: "ldap://openldap.{namespace}.svc.cluster:{port}"
      # adminpassword: ""
      # ldap_schema: "ou=Tenants,dc=example,dc=org"

    # If you set authentication_type to keycloak, set the following configuration information of keycloak
    keycloak:
      ## Below the configuration for the Keycloak server
      # serverUrl: "my_url_keycloak"
      # clientID: rating-operator
      # realmName: "my_realm"
      # clientSecretKey: "bakshdhb-dkjashbdjh-dkjahdfskl"


  ## Location of the prometheus component
  prometheus:
    service: prometheus-kube-prometheus-prometheus
    namespace: monitoring
    schema: http
    domain: svc.cluster.local
    port: 9090

  ## Configuration of the api component
  api:

    # Pod name 
    name: api

    # Below lies the name of the postgresql pod running along the rating-operator-api
    config:
      postgres_hostname: "{{ .Release.Name }}-postgresql-headless"
      postgres_secret: "{{ .Release.Name }}-postgresql"

    # Image tags
    # These options are mostly for developpers
    # Base values should satisfy user needs
    image:
      pullPolicy: Always
      repository: smilernd/rating-operator-api
      tag: v3-proto-boumedienne

    # Resources allocation
    # Leaving empty is fine, use only if you know what you are doing, as lack of resources can starve the operator
    affinity: {}
    nodeSelector: {}
    resources: {}
    tolerations: []

    # rating-operator-api service configuration
    # To be used to expose the api to the web
    service:
      port: 80
      type: ClusterIP
    
    # The rating-operator supports rook-ceph and longhorn storageClasses out of the box
    # Follow the rating-operator documentation for more details about their installation and configuration.
    # Different storageClass / provider could be used, but we do not warranty positive results.
    storage:
      storageClass: longhorn

  # This value configuration where to reach the metering-operator storage system
  # Do not modify if you don't have a specific need
  # The usage of metering-operator is deprecated
  metering:
    presto_database_uri: presto://root@presto.metering:8080/hive/metering

  # Storage pod configuration
  # Uses a compressed bitnami/postgresql chart
  # See https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml for more options
  global:
    storageClass: longhorn
    postgresql:
      storageClass: longhorn
  storageClass: longhorn
  postgresql:
    enabled: true
    
    # As mentionned above, rating-operator support rook-ceph and longhorn out of the box
    storageClass: longhorn

    # Both password and PostgresPassword have to be set if your postgresqlUsername is "postgres"
    postgresqlUsername: postgres
    postgresqlPassword: notasecret
    postgresqlPostgresPassword: notasecret

    # Openshift/OKD specifics
    # Modify only if you have trouble allocating / RBAC problems with your storage pod on Openshift
    # securityContext:                                                                                                                                                                 
    #   enabled: true                                                                                                                                                                  
    #   fsGroup: 1000600000
    #   runAsUser: 1000600000
    # volumePermissions:                                                                                                                                                               
    #   enabled: false                                                                                                                                                                 
    #   securityContext:                                                                                                                                                               
    #     runAsUser: 1000600000

  ## Configuration of the manager component
  manager:

    # Pod name
    name: manager

    # Image tags
    # Mostly for developpers, the base values should satisfy user needs
    image:
      pullPolicy: Always
      repository: alterwayrnd/rating-operator-manager
      tag: latest

    # Resources allocation
    # Leaving empty is fine, use only if you know what you are doing, as lack of resources can starve the operator
    affinity: {}
    nodeSelector: {}
    resources: {}
    tolerations: []

  ## Configuration of the engine component
  engine:
    
    # Pod name
    name: engine

    # Image tags
    # Mostly for developpers, the base values should satisfy user needs
    image:
      pullPolicy: Always
      repository: smilernd/rating-operator-engine
      tag: v3-test

    # Resources allocation
    # Leaving empty is fine, use only if you know what you are doing, as lack of resources can starve the operator
    affinity: {}
    nodeSelector: {}
    resources: {}
    tolerations: []

  ## Configuration of the frontend component 
  # Grafana is used as the base frontend for the rating-operator
  frontend:

    # The address to which you'll be redirected once logged in through the rating-operator
    url: "localhost:3000"

    # If you try to connect a different frontend to the application, this might be needed
    allowOrigin: "*"

    # Grafana configuration
    grafana:

      # Password for the administrator account
      password: prom-operator

      # The address toward which the requests made to Grafana will be directed
      backend: "prometheus-grafana.monitoring.svc.cluster.local"

      # Helpers for cookies
      # Grafana session through HTTPS requires specific cookie handling
      env:
        domain: "none"
        httponly: "false"
        secure: "false"
        samesite: "none"


  # Convenience options, usually left as default
  rbac:
    create: true
  service:
    port: 80
    type: ClusterIP
  nameOverride: null
  networkPolicy:
    enabled: false
  fullnameOverride: null
  ingress:
    annotations: {}
    enabled: false
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
